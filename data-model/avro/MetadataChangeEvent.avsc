{
  "type": "record",
  "name": "MetadataChangeEvent",
  "namespace": "com.linkedin.events.metadata",
  "fields": [
    {
      "name": "auditHeader",
      "type": {
        "type": "record",
        "name": "KafkaAuditHeader",
        "namespace": "com.linkedin.events",
        "fields": [
          {
            "name": "time",
            "type": "long",
            "doc": "The time at which the event was emitted into kafka."
          },
          {
            "name": "server",
            "type": "string",
            "doc": "The fully qualified name of the host from which the event is being emitted."
          },
          {
            "name": "instance",
            "type": [
              "null",
              "string"
            ],
            "doc": "The instance on the server from which the event is being emitted. e.g. i001"
          },
          {
            "name": "appName",
            "type": "string",
            "doc": "The name of the application from which the event is being emitted. see go/appname"
          },
          {
            "name": "messageId",
            "type": {
              "type": "fixed",
              "name": "UUID",
              "namespace": "com.linkedin.events",
              "size": 16
            },
            "doc": "A unique identifier for the message"
          },
          {
            "name": "auditVersion",
            "type": [
              "null",
              "int"
            ],
            "doc": "The version that is being used for auditing. In version 0, the audit trail buckets events into 10 minute audit windows based on the EventHeader timestamp. In version 1, the audit trail buckets events as follows: if the schema has an outer KafkaAuditHeader, use the outer audit header timestamp for bucketing; else if the EventHeader has an inner KafkaAuditHeader use that inner audit header's timestamp for bucketing",
            "default": null
          },
          {
            "name": "fabricUrn",
            "type": [
              "null",
              "string"
            ],
            "doc": "The fabricUrn of the host from which the event is being emitted. Fabric Urn in the format of urn:li:fabric:{fabric_name}. See go/fabric.",
            "default": null
          }
        ]
      },
      "doc": "This header records information about the context of an event as it is emitted into kafka and is intended to be used by the kafka audit application.  For more information see go/kafkaauditheader"
    },
    {
      "name": "urn",
      "type": [
        "null",
        "string"
      ],
      "doc": "The applicable URN - urn:li:dataset:(urn:li:dataPlatform:dali, search_mp.search_event_event, PROD), urn:salesforce:table:opportunity, arn:aws:dynamodb::<account>:table/<table>. This is the preferred identifier for a dataset."
    },
    {
      "name": "datasetIdentifier",
      "type": [
        "null",
        {
          "type": "record",
          "name": "DatasetIdentifier",
          "fields": [
            {
              "name": "dataPlatformUrn",
              "type": "string",
              "doc": "The platform or type of the metadata object: espresso,kafka,oracle,voldemort,hdfs,hive,dalids,teradata,... for example, urn:li:dataPlatform:espresso, urn:li:dataPlatform:dalids"
            },
            {
              "name": "nativeName",
              "type": "string",
              "doc": "The native name: <db>.<table>, /dir/subdir/<name>, or <name>"
            },
            {
              "name": "dataOrigin",
              "type": {
                "type": "enum",
                "name": "DeploymentTier",
                "symbols": [
                  "PROD",
                  "CORP",
                  "GRID",
                  "PREPROD",
                  "CANARY",
                  "DMZ",
                  "STG",
                  "UAT",
                  "UAT1",
                  "UAT2",
                  "UAT3",
                  "QA",
                  "QA1",
                  "QA2",
                  "QA3",
                  "EI",
                  "EI1",
                  "EI2",
                  "EI3",
                  "QEI",
                  "QEI1",
                  "QEI2",
                  "QEI3",
                  "TEST",
                  "LIT",
                  "SIT",
                  "INT",
                  "DEV",
                  "LOCAL",
                  "ARCHIVE",
                  "DROPBOX",
                  "SANDBOX",
                  "POC"
                ]
              },
              "doc": "Origin/Source Tier where the record is generated? This can be different from Deployment. For example, PROD data can be copied to a TEST server, then DataOrigin=PROD while the dataset instance belongs to TEST",
              "default": "PROD"
            }
          ]
        }
      ],
      "doc": "This has the same function as URN, but it can be used when the source system does not provide the URN"
    },
    {
      "name": "datasetProperties",
      "type": [
        "null",
        {
          "type": "record",
          "name": "DatasetProperty",
          "fields": [
            {
              "name": "changeAuditStamp",
              "type": {
                "type": "record",
                "name": "ChangeAuditStamp",
                "fields": [
                  {
                    "name": "actorUrn",
                    "type": "string",
                    "doc": "urn:li:corpuser:jsmith, urn:li:team:xyz, urn:li:service:money"
                  },
                  {
                    "name": "type",
                    "type": "string",
                    "doc": "CREATE, UPDATE, DELETE"
                  },
                  {
                    "name": "time",
                    "type": "long",
                    "doc": "Epoch",
                    "logicalType": "timestamp-millis"
                  },
                  {
                    "name": "note",
                    "type": "string",
                    "doc": "Extra detail about the changes"
                  }
                ]
              }
            },
            {
              "name": "nativeType",
              "type": {
                "type": "enum",
                "name": "PlatformNativeType",
                "symbols": [
                  "TABLE",
                  "VIEW",
                  "DIRECTORY",
                  "FILE",
                  "INDEX",
                  "STREAM",
                  "BLOB",
                  "FUNCTION",
                  "OTHER"
                ]
              },
              "doc": "The native type about how the dataset is stored in the platform"
            },
            {
              "name": "uri",
              "type": [
                "null",
                "string"
              ],
              "doc": "The abstracted such as hdfs:///data/tracking/PageViewEvent, file:///dir/file_name. This is often used in codes and scripts.",
              "default": null
            },
            {
              "name": "caseSensitivity",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "CaseSensitivityInfo",
                  "fields": [
                    {
                      "name": "datasetName",
                      "type": "boolean",
                      "doc": "Is native object name CS?",
                      "default": true
                    },
                    {
                      "name": "fieldName",
                      "type": "boolean",
                      "doc": "Is field name CS?",
                      "default": true
                    },
                    {
                      "name": "dataContent",
                      "type": "boolean",
                      "doc": "Is data content CS?",
                      "default": true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "doc": "Basic properties of a dataset, such as Native Type, Case Sensitivity, Audit Stamp"
    },
    {
      "name": "owners",
      "type": {
        "type": "array",
        "items": {
          "type": "record",
          "name": "OwnerInfo",
          "fields": [
            {
              "name": "ownerCategory",
              "type": {
                "type": "enum",
                "name": "OwnerCategory",
                "symbols": [
                  "OWNER",
                  "PRODUCER",
                  "DELEGATE",
                  "STAKEHOLDER"
                ]
              },
              "doc": "Owner, Producer, Delegate, Stakeholder",
              "default": "OWNER"
            },
            {
              "name": "owner",
              "type": "string",
              "doc": "urn:li:corp:ldap, urn:li:group:abc, urn:li:service:mp_name, user_id, group_name"
            },
            {
              "name": "ownerType",
              "type": {
                "type": "enum",
                "name": "OwnerType",
                "symbols": [
                  "URN",
                  "USER",
                  "GROUP",
                  "ROLE",
                  "SERVICE"
                ]
              },
              "doc": "user, group, role, service, or urn",
              "default": "URN"
            },
            {
              "name": "ownerSource",
              "type": "string",
              "doc": "JIRA,SCM,RB,DB,FS,AUDIT,NUAGE from where the owner id is extracted"
            }
          ]
        }
      },
      "default": []
    },
    {
      "name": "references",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "Reference",
            "fields": [
              {
                "name": "referenceType",
                "type": {
                  "type": "enum",
                  "name": "ReferenceType",
                  "symbols": [
                    "JIRA",
                    "RB",
                    "LIX",
                    "CR",
                    "WIKI",
                    "SCM"
                  ]
                }
              },
              {
                "name": "referenceFormat",
                "type": {
                  "type": "enum",
                  "name": "ReferenceFormat",
                  "symbols": [
                    "ID",
                    "URN",
                    "URL",
                    "URI"
                  ]
                }
              },
              {
                "name": "referenceList",
                "type": {
                  "type": "array",
                  "items": "string"
                },
                "doc": "list of reference ids, keys or uris"
              }
            ]
          }
        }
      ],
      "default": null
    },
    {
      "name": "partitionSpec",
      "type": [
        "null",
        {
          "type": "record",
          "name": "PartitionSpecification",
          "fields": [
            {
              "name": "totalPartitionLevel",
              "type": [
                "int",
                "null"
              ],
              "doc": "What is the deepest partition level",
              "default": 1
            },
            {
              "name": "partitionSpecText",
              "type": [
                "null",
                "string"
              ],
              "doc": "Original partition DDL",
              "default": null
            },
            {
              "name": "hasTimePartition",
              "type": [
                "boolean",
                "null"
              ],
              "doc": "Does the dataset contain time partition?",
              "default": false
            },
            {
              "name": "hasHashPartition",
              "type": [
                "boolean",
                "null"
              ],
              "doc": "Does the dataset contain hash/shard partition?",
              "default": false
            },
            {
              "name": "partitionKeys",
              "type": [
                "null",
                {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "PartitionKey",
                    "fields": [
                      {
                        "name": "partitionLevel",
                        "type": "int",
                        "doc": "1,2,3..."
                      },
                      {
                        "name": "partitionType",
                        "type": {
                          "type": "enum",
                          "name": "PartitionType",
                          "symbols": [
                            "RANGE",
                            "HASH",
                            "LIST",
                            "CASE",
                            "ROUND_ROBIN"
                          ]
                        }
                      },
                      {
                        "name": "timeGranularity",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "The most granular level: Month, Week, Day, Hour, Minute or Second"
                      },
                      {
                        "name": "timeFormat",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "yyyyMMdd, yyyy-MM-dd or Epoch. https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"
                      },
                      {
                        "name": "fieldNames",
                        "type": {
                          "type": "array",
                          "items": "string"
                        },
                        "doc": "Partition keys (use the full field path for nested fields)",
                        "default": []
                      },
                      {
                        "name": "partitionValues",
                        "type": {
                          "type": "array",
                          "items": "string"
                        },
                        "doc": "For RANGE: [min, next_partition_min_value); for LIST: [value1, value2...], for CASE: [expr1, expr2]; for Hive: [value]; for HASH: N/A",
                        "default": []
                      },
                      {
                        "name": "numberOfHashBuckets",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "2,4,8,16..."
                      }
                    ]
                  }
                }
              ],
              "doc": "Array of partition keys/fields",
              "default": null
            },
            {
              "name": "timePartitionExpression",
              "type": [
                "null",
                "string"
              ],
              "doc": "ds=yyyy-MM-dd/ts=HH, datepartition=yyyy-MM-dd-HH, or dt=yyyyMMdd"
            }
          ]
        }
      ],
      "doc": "Partition specification detail"
    },
    {
      "name": "deploymentInfo",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "DeploymentDetail",
            "fields": [
              {
                "name": "deploymentTier",
                "type": "DeploymentTier",
                "doc": "defined in [dataOrigin], such as DEV,TEST,PROD",
                "default": "PROD"
              },
              {
                "name": "dataCenter",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "DC1, DC2, LTX3, LVA4, ...",
                "default": null
              },
              {
                "name": "region",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Region name if applicable, such as us-central2, eu-west3",
                "default": null
              },
              {
                "name": "zone",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Zone name or id if applicable, such as asia-east1-b, us-west1-a",
                "default": null
              },
              {
                "name": "cluster",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Cluster name or a comma-delimited list of Servers",
                "default": null
              },
              {
                "name": "container",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Container or tenant name",
                "default": null
              },
              {
                "name": "enabled",
                "type": "boolean",
                "doc": "is the dataset instance enabled under this deployment environment",
                "default": true
              },
              {
                "name": "additionalDeploymentInfo",
                "type": {
                  "type": "map",
                  "values": "string"
                },
                "doc": "Additional deployment info, such as Zookeeper, Connection, Graphite URL, native reference ID or KEY"
              }
            ]
          }
        }
      ],
      "doc": "The deployment info",
      "default": null
    },
    {
      "name": "tags",
      "type": {
        "type": "array",
        "items": "string"
      },
      "doc": "Tags of the dataset object"
    },
    {
      "name": "schema",
      "type": [
        "null",
        {
          "type": "record",
          "name": "DatasetSchema",
          "fields": [
            {
              "name": "isBackwardCompatible",
              "type": [
                "null",
                "boolean"
              ],
              "doc": "Is this reversion compatible with the previous revision? null means unknown",
              "default": null
            },
            {
              "name": "isFieldNameCaseSensitive",
              "type": "boolean",
              "doc": "Are the field names in schema Case Sensitive?",
              "default": true
            },
            {
              "name": "createTime",
              "type": "long",
              "doc": "epoch milli",
              "logicalType": "timestamp-millis"
            },
            {
              "name": "revision",
              "type": [
                "null",
                "int"
              ],
              "doc": "revision if applicable"
            },
            {
              "name": "version",
              "type": [
                "null",
                "string"
              ],
              "doc": "1.0.3, 2.12, 2_3_6"
            },
            {
              "name": "name",
              "type": [
                "null",
                "string"
              ],
              "doc": "name or class name if applicable"
            },
            {
              "name": "description",
              "type": [
                "null",
                "string"
              ],
              "doc": "description"
            },
            {
              "name": "originalSchema",
              "type": {
                "type": "record",
                "name": "OriginalSchema",
                "fields": [
                  {
                    "name": "format",
                    "type": {
                      "type": "enum",
                      "name": "SchemaTextFormat",
                      "symbols": [
                        "JSON",
                        "XML",
                        "DDL",
                        "THRIFT",
                        "PROTOBUF",
                        "HOCON",
                        "TEXT"
                      ]
                    },
                    "default": "TEXT"
                  },
                  {
                    "name": "text",
                    "type": "string",
                    "doc": "The raw schema content"
                  },
                  {
                    "name": "checksum",
                    "type": {
                      "type": "map",
                      "values": "string"
                    },
                    "doc": "Map key can be MD5,SHA-1,CRC32. Checksum is hex string in lower case."
                  }
                ]
              }
            },
            {
              "name": "keySchema",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "DatasetKeySchema",
                  "fields": [
                    {
                      "name": "format",
                      "type": "SchemaTextFormat",
                      "doc": "only applicable if key schema exists",
                      "default": "JSON"
                    },
                    {
                      "name": "text",
                      "type": "string",
                      "doc": "schema for the Key if applicable"
                    }
                  ]
                }
              ],
              "doc": "if dataset has dedicated key schema which is separated from the table or value part, it can be stored here"
            },
            {
              "name": "fieldSchema",
              "type": [
                "null",
                {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "FieldSchemaRecord",
                    "fields": [
                      {
                        "name": "position",
                        "type": "int",
                        "doc": "Field position id, SORT_ID. Starting from 1",
                        "default": 1
                      },
                      {
                        "name": "parentFieldPosition",
                        "type": "int",
                        "doc": "Position id of the parent field for nested structure. 0 means this field is the top-level field",
                        "default": 0
                      },
                      {
                        "name": "fieldPath",
                        "type": "string",
                        "doc": "For example, <grand_grand_parent>.<grand_parent>.<parent>.<name>"
                      },
                      {
                        "name": "fieldJsonPath",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "http://goessner.net/articles/JsonPath this is an alternative for fieldPath. For example, $.store.book[0].title"
                      },
                      {
                        "name": "label",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "Field title/label for display"
                      },
                      {
                        "name": "aliases",
                        "type": {
                          "type": "array",
                          "items": "string"
                        },
                        "doc": "Field aliaes."
                      },
                      {
                        "name": "type",
                        "type": "string",
                        "doc": "native data type"
                      },
                      {
                        "name": "logicalType",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "logical data type when the native type is too generic, DateTime, NUMBER(15,2), GUID, Epoch(3), Epoch(0)"
                      },
                      {
                        "name": "semanticType",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "semantic data type. can be Urn, MemberId, Email, PhoneNumber, GroupName"
                      },
                      {
                        "name": "abstractType",
                        "type": [
                          "null",
                          {
                            "type": "enum",
                            "name": "AbstractDataType",
                            "symbols": [
                              "STRING",
                              "NUMBER",
                              "BINARY",
                              "BOOLEAN",
                              "TIMESTAMP",
                              "ARRAY",
                              "MAP",
                              "RECORD",
                              "UNION"
                            ]
                          }
                        ],
                        "doc": "Standard types to generate canonical schema abstraction. Hide the subtle difference."
                      },
                      {
                        "name": "description",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "field comment/description"
                      },
                      {
                        "name": "nullable",
                        "type": "boolean",
                        "doc": "Is the field nullable",
                        "default": true
                      },
                      {
                        "name": "defaultValue",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "default value"
                      },
                      {
                        "name": "maxByteLength",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "max length in bytes. For UTF8, maxByteLength = maxCharLength x 3"
                      },
                      {
                        "name": "maxCharLength",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "max length in characters"
                      },
                      {
                        "name": "charType",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "ascii, utf8, utf16, latin, iso8859"
                      },
                      {
                        "name": "precision",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "number(p,s)"
                      },
                      {
                        "name": "scale",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "number(p,s)"
                      },
                      {
                        "name": "isRecursive",
                        "type": "boolean",
                        "doc": "Does this field contains recursive structure?",
                        "default": false
                      }
                    ]
                  }
                }
              ],
              "doc": "flattened/normalized field-level schema definition"
            },
            {
              "name": "changeDataCaptureFields",
              "type": {
                "type": "array",
                "items": {
                  "type": "record",
                  "name": "ChangeDataCaptureField",
                  "fields": [
                    {
                      "name": "fieldPath",
                      "type": "string",
                      "doc": "field path"
                    },
                    {
                      "name": "role",
                      "type": {
                        "type": "enum",
                        "name": "ChangeDataCaptureRole",
                        "symbols": [
                          "SEQUENCE",
                          "TIME"
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "auditFields",
              "type": {
                "type": "array",
                "items": {
                  "type": "record",
                  "name": "AuditField",
                  "fields": [
                    {
                      "name": "fieldPath",
                      "type": "string",
                      "doc": "field path"
                    },
                    {
                      "name": "role",
                      "type": {
                        "type": "enum",
                        "name": "AuditFieldType",
                        "symbols": [
                          "TOKEN",
                          "DATA_TIME",
                          "LOG_TIME",
                          "TIME"
                        ]
                      }
                    }
                  ]
                }
              },
              "default": []
            }
          ]
        }
      ],
      "doc": "The schema/structure definition of a dataset. For Key-Value and Document db, a dedicated KeySchema is provided. Schema includes KeySchema, OriginalSchema, FieldSchema, ChangeDataCaptureFields, AuditFields",
      "default": null
    },
    {
      "name": "constraints",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "Constraint",
            "fields": [
              {
                "name": "constraintType",
                "type": {
                  "type": "enum",
                  "name": "ConstraintType",
                  "symbols": [
                    "CONSTRAINT",
                    "REFERETIAL",
                    "INDEX",
                    "DATAQUALITY",
                    "SECURITY"
                  ]
                }
              },
              {
                "name": "constraintSubType",
                "type": {
                  "type": "enum",
                  "name": "ConstraintSubType",
                  "symbols": [
                    "RANGE",
                    "LIST",
                    "REGEXP"
                  ]
                }
              },
              {
                "name": "constraintName",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "constraint name"
              },
              {
                "name": "constraintExpression",
                "type": "string",
                "doc": "Expression in constraint"
              },
              {
                "name": "enabled",
                "type": "boolean",
                "doc": "Is constraint enabled",
                "default": true
              },
              {
                "name": "referredFields",
                "type": {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "ReferrenceField",
                    "fields": [
                      {
                        "name": "position",
                        "type": "int",
                        "doc": "Position in a constraint, starting from 1"
                      },
                      {
                        "name": "fieldPath",
                        "type": "string",
                        "doc": "Field name with full path"
                      }
                    ]
                  }
                }
              },
              {
                "name": "additionalReferences",
                "type": [
                  "null",
                  {
                    "type": "map",
                    "values": "string"
                  }
                ],
                "doc": "When map key = Index, the value = PK/AK index name; when key = Constraint, the value refers to another dataset's constraint, such as FK; when key = DataQuality, the value points to data quality rule."
              }
            ]
          }
        }
      ],
      "default": null
    },
    {
      "name": "indices",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "Index",
            "fields": [
              {
                "name": "indexType",
                "type": "string",
                "doc": "BTree, Hash, Fulltext, Normal"
              },
              {
                "name": "indexName",
                "type": "string",
                "doc": "Index name"
              },
              {
                "name": "isUnique",
                "type": "boolean",
                "doc": "Is unique index or not",
                "default": false
              },
              {
                "name": "indexedFields",
                "type": {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "IndexedFieldName",
                    "fields": [
                      {
                        "name": "position",
                        "type": "int",
                        "doc": "Position id within an index"
                      },
                      {
                        "name": "fieldPath",
                        "type": "string",
                        "doc": "Field name or expression"
                      },
                      {
                        "name": "descend",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "ASC or DESC",
                        "defualt": "ASC"
                      },
                      {
                        "name": "prefixLength",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "The length of the prefix portion of a string"
                      },
                      {
                        "name": "filter",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "Filter expression for conditional index"
                      }
                    ]
                  }
                },
                "doc": "Fields in an index"
              }
            ]
          }
        }
      ],
      "default": null
    },
    {
      "name": "capacity",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "Capacity",
            "fields": [
              {
                "name": "capacityName",
                "type": "string",
                "doc": "Capacity name"
              },
              {
                "name": "capacityType",
                "type": "string",
                "doc": "storage, read qps, write qps, response time, ...",
                "default": "storage"
              },
              {
                "name": "capacityUnit",
                "type": [
                  "null",
                  {
                    "type": "enum",
                    "name": "CapacityMeasurementUnit",
                    "symbols": [
                      "BYTE",
                      "KB",
                      "MB",
                      "GB",
                      "TB",
                      "PB",
                      "QPS",
                      "m",
                      "s",
                      "ms"
                    ]
                  }
                ],
                "doc": "measurement unit when applicable"
              },
              {
                "name": "capacityLow",
                "type": "double",
                "doc": "lower/min capacity"
              },
              {
                "name": "capacityHigh",
                "type": "double",
                "doc": "higher/max capacity"
              }
            ]
          }
        }
      ],
      "default": null
    },
    {
      "name": "privacyCompliancePolicy",
      "type": [
        "null",
        {
          "type": "record",
          "name": "PrivacyCompliancePolicy",
          "fields": [
            {
              "name": "complianceType",
              "type": {
                "type": "enum",
                "name": "PrivacyComplianceType",
                "symbols": [
                  "AUTO_PURGE",
                  "CUSTOM_PURGE",
                  "LIMITED_RETENTION",
                  "PURGE_NOT_APPLICABLE"
                ]
              }
            },
            {
              "name": "compliancePurgeEntities",
              "type": [
                "null",
                {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "PurgeableEntityField",
                    "fields": [
                      {
                        "name": "identifierType",
                        "type": {
                          "type": "enum",
                          "name": "PurgeableEntityFieldIdentifierType",
                          "symbols": [
                            "MEMBER_ID",
                            "SUBJECT_MEMBER_ID",
                            "URN",
                            "SUBJECT_URN",
                            "COMPANY_ID",
                            "GROUP_ID",
                            "CUSTOMER_ID",
                            "SUBJECT_CUSTOMER_ID"
                          ]
                        }
                      },
                      {
                        "name": "identifierField",
                        "type": "string",
                        "doc": "a pathspec to a field inside of the record containing an identifier for a purgeable entity, e.g. header.memberId, header.viewerUrn, value.activity.actorUrn, etc."
                      }
                    ]
                  }
                }
              ],
              "doc": "The fields which identify purgeable entities in records"
            }
          ]
        }
      ],
      "doc": "Describe the purgeable entity fields",
      "default": null
    },
    {
      "name": "securitySpecification",
      "type": [
        "null",
        {
          "type": "record",
          "name": "SecuritySpecification",
          "fields": [
            {
              "name": "classification",
              "type": {
                "type": "record",
                "name": "ConfidentialClassification",
                "fields": [
                  {
                    "name": "highlyConfidential",
                    "type": [
                      "null",
                      {
                        "type": "array",
                        "items": "string"
                      }
                    ],
                    "doc": "list of highly confidential fields",
                    "default": null
                  },
                  {
                    "name": "confidential",
                    "type": [
                      "null",
                      {
                        "type": "array",
                        "items": "string"
                      }
                    ],
                    "doc": "list of confidential fields",
                    "default": null
                  },
                  {
                    "name": "limitedDistribution",
                    "type": [
                      "null",
                      {
                        "type": "array",
                        "items": "string"
                      }
                    ],
                    "doc": "list of limited distribution fields",
                    "default": null
                  },
                  {
                    "name": "mustBeEncrypted",
                    "type": [
                      "null",
                      {
                        "type": "array",
                        "items": "string"
                      }
                    ],
                    "doc": "list of fields that must be encrypted",
                    "default": null
                  },
                  {
                    "name": "mustBeMasked",
                    "type": [
                      "null",
                      {
                        "type": "array",
                        "items": "string"
                      }
                    ],
                    "doc": "list of fields that must be masked",
                    "default": null
                  }
                ]
              },
              "doc": "Classify the sensitive fields into 5 categories: HighlyConfidential, Confidential, LimitedDistribution, MustBeEncrypted, MustBeMasked. If every field is confidential, * can be used."
            },
            {
              "name": "recordOwnerType",
              "type": {
                "type": "enum",
                "name": "RecordOwnerType",
                "symbols": [
                  "MEMBER",
                  "CUSTOMER",
                  "JOINT",
                  "INTERNAL",
                  "COMPANY"
                ]
              }
            },
            {
              "name": "retentionPolicy",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "RetentionPolicy",
                  "fields": [
                    {
                      "name": "retentionType",
                      "type": {
                        "type": "enum",
                        "name": "RetentionType",
                        "symbols": [
                          "LIMITED",
                          "LEGAL_HOLD",
                          "UNLIMITED"
                        ]
                      },
                      "doc": "Retention type on dataset"
                    },
                    {
                      "name": "retentionWindow",
                      "type": [
                        "null",
                        "long"
                      ],
                      "doc": "Time in (unit) how long data is retained for in case of LIMITED retention",
                      "default": null
                    },
                    {
                      "name": "retentionWindowUnit",
                      "type": [
                        "null",
                        {
                          "type": "enum",
                          "name": "TimePeriodUnit",
                          "symbols": [
                            "YEAR",
                            "MONTH",
                            "WEEK",
                            "DAY",
                            "HOUR",
                            "MINUTE",
                            "SECOND",
                            "MILLISECOND"
                          ]
                        }
                      ],
                      "default": null
                    }
                  ]
                }
              ],
              "doc": "Retention"
            },
            {
              "name": "geographicAffinity",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "GeographicAffinity",
                  "fields": [
                    {
                      "name": "affinity",
                      "type": [
                        "null",
                        {
                          "type": "enum",
                          "name": "AffinityType",
                          "symbols": [
                            "LIMITED",
                            "EXCLUDED"
                          ]
                        }
                      ],
                      "doc": "Affinity type",
                      "default": null
                    },
                    {
                      "name": "locations",
                      "type": {
                        "type": "array",
                        "items": {
                          "type": "record",
                          "name": "Locale",
                          "namespace": "com.linkedin.common",
                          "fields": [
                            {
                              "name": "language",
                              "type": "string",
                              "doc": "A lowercase two-letter language code as defined by ISO-639."
                            },
                            {
                              "name": "country",
                              "type": [
                                "null",
                                "string"
                              ],
                              "doc": "An uppercase two-letter country code as defined by ISO-3166.",
                              "default": null
                            },
                            {
                              "name": "variant",
                              "type": [
                                "null",
                                "string"
                              ],
                              "doc": "Vendor or browser-specific code.",
                              "default": null
                            }
                          ]
                        }
                      },
                      "doc": "List of locations data should be stored at"
                    }
                  ]
                }
              ],
              "doc": "Geographic affinity if applicable",
              "default": null
            }
          ]
        }
      ],
      "doc": "Classify the confidential specification",
      "default": null
    }
  ]
}