# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
#GET         /                             controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                 controllers.Assets.at(path="/public", file)

# Find a dataset's dependencies.
GET         /dependency/dataset           controllers.DatasetController.getDatasetDependency()

# Find dependent datasets, for example hive tables based on the hdfs path
GET         /dependents/dataset/*uri      controllers.DatasetController.getDatasetDependentsByUri(uri: String)

# Find a dataset's dependents.
GET         /dataset/:id/dependents       controllers.DatasetController.getDatasetDependentsById(id: Long)

# Find a dataset's schema, field and all datasets level information.
GET         /dataset                      controllers.DatasetController.getDatasetInfo()

# Find a list of watchers for a given dataset name
GET         /dataset/watchers             controllers.DatasetController.getDatasetWatchers(datasetName: String)

# Find a list of dataset properties
GET         /dataset/properties           controllers.DatasetController.getDatasetUrns(propertiesLike: String)

#param: type
# Find latest dataset of given type
GET         /dataset/latest/:type         controllers.DatasetController.getLatestOfType(type: String)

# Find latest dataset of given type after a certain date
GET         /dataset/after/:type/:time    controllers.DatasetController.getLatestAfter(type: String, time: Long)

# Find latest dataset of given type after a certain date
GET         /dataset/before/:type/:time   controllers.DatasetController.getLatestBefore(type: String, time: Long)

# Find latest dataset of given type after a certain date
GET         /dataset/between/:type/:firsttime/:secondtime              controllers.DatasetController.getLatestBetween(type: String, firsttime: Long, secondtime: Long)

# Find  dataset of given type at a certain date
GET         /dataset/attime/:type/:time              controllers.DatasetController.getAtTime(type: String, time: Long)

# Find  dataset of given type at a certain date within a range (essentially a wrapper for /dataset/between/)
GET         /dataset/attime/:type/:time/:window              controllers.DatasetController.getAtTimeWindow(type :String, time: Long, window: Long)

# update/add to/change the properties field of a database
PUT         /dataset/properties           controllers.DatasetController.updateProperties()

# set a dataset's (or other's) validity
PUT         /dataset/valid                controllers.DatasetController.setValidity()

# get common parents for two urns
GET         /dataset/common/parents       controllers.DatasetController.getCommonParents()

# remove a dataset
PUT         /dataset/remove               controllers.DatasetController.removeDataset()


# get/post/put display property values
GET         /property/assigns/:name       controllers.PropertyController.getAssignProp(name: String)

POST        /property/assigns             controllers.PropertyController.addAssignProp()

PUT         /property/assigns             controllers.PropertyController.updateAssignProp()

# _sort_list get/set
GET         /property/sortlist/:name       controllers.PropertyController.getSortListProp(name: String)

POST        /property/sortlist             controllers.PropertyController.addSortListProp()

PUT         /property/sortlist             controllers.PropertyController.updateSortListProp()

# generalized get/set
GET         /property/:base/:attr/:name     controllers.PropertyController.getProperty(base: String, attr: String, name: String)

POST        /property/:base/:attr           controllers.PropertyController.postProperty(base: String, attr: String)

PUT         /property/:base/:attr           controllers.PropertyController.putProperty(base: String, attr: String)

# remove a property
PUT         /property/remove                controllers.PropertyController.removeProperty()


# Insert a new dataset
POST        /dataset                      controllers.DatasetController.addDataset()

# Insert a new job
POST        /job                      controllers.DatasetController.addJob()

# Insert a new app
POST        /app                      controllers.DatasetController.addJob()

# Insert a new database
POST        /database                      controllers.DatasetController.addDatabase()

# Insert a new job data lineage
POST        /lineage                      controllers.LineageController.addJobLineage()
