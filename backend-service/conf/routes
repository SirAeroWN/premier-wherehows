# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                             controllers.Application.index()

# health check
GET         /healthcheck                  controllers.Application.healthcheck()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                 controllers.Assets.at(path="/public", file)

# Find a dataset's dependencies.
GET         /dependency/dataset           controllers.DatasetController.getDatasetDependency()

# Find dependent datasets, for example hive tables based on the hdfs path
GET         /dependents/dataset/*uri      controllers.DatasetController.getDatasetDependentsByUri(uri: String)

# Find a dataset's dependents.
GET         /dataset/:id/dependents       controllers.DatasetController.getDatasetDependentsById(id: Long)

# Find a dataset's schema, field and all datasets level information.
GET         /dataset                      controllers.DatasetController.getDatasetInfo()

# Find a list of watchers for a given dataset name
GET         /dataset/watchers             controllers.DatasetController.getDatasetWatchers(datasetName: String)

# Find a list of dataset properties
GET         /dataset/properties           controllers.DatasetController.getDatasetUrns(propertiesLike: String)

#param: type
# Find latest dataset of given type
GET         /dataset/latest/:type         controllers.DatasetController.getLatestOfType(type: String)

# Find latest dataset of given type after a certain date
GET         /dataset/after/:type/:time    controllers.DatasetController.getLatestAfter(type: String, time: Long)

# Find latest dataset of given type after a certain date
GET         /dataset/before/:type/:time   controllers.DatasetController.getLatestBefore(type: String, time: Long)

# Find latest dataset of given type after a certain date
GET         /dataset/between/:type/:firsttime/:secondtime              controllers.DatasetController.getLatestBetween(type: String, firsttime: Long, secondtime: Long)

# Find  dataset of given type at a certain date
GET         /dataset/attime/:type/:time              controllers.DatasetController.getAtTime(type: String, time: Long)

# Find  dataset of given type at a certain date within a range (essentially a wrapper for /dataset/between/)
GET         /dataset/attime/:type/:time/:window              controllers.DatasetController.getAtTimeWindow(type :String, time: Long, window: Long)

# update/add to/change the properties field of a database
PUT         /dataset/properties           controllers.DatasetController.updateProperties()

# set a dataset's (or other's) validity
PUT         /dataset/valid                controllers.DatasetController.setValidity()

# get common parents for two urns
GET         /dataset/common/parents       controllers.DatasetController.getCommonParents()


# get/post/put display property values
GET         /property/assigns/:name       controllers.PropertyController.getAssignProp(name: String)

POST        /property/assigns             controllers.PropertyController.addAssignProp()

PUT         /property/assigns             controllers.PropertyController.updateAssignProp()

# _sort_list get/set
GET         /property/sortlist/:name       controllers.PropertyController.getSortListProp(name: String)

POST        /property/sortlist             controllers.PropertyController.addSortListProp()

PUT         /property/sortlist             controllers.PropertyController.updateSortListProp()

# node color get/set
GET         /property/node/color/:name       controllers.PropertyController.getNodeColor(name: String)

POST        /property/node/color             controllers.PropertyController.addNodeColor()

PUT         /property/node/color             controllers.PropertyController.updateNodeColor()

# node type get/set
GET         /property/node/type/:name       controllers.PropertyController.getNodeType(name: String)

POST        /property/node/type             controllers.PropertyController.addNodeType()

PUT         /property/node/type             controllers.PropertyController.updateNodeType()

# edge style get/set
GET         /property/edge/style/:name       controllers.PropertyController.getEdgeStyle(name: String)

POST        /property/edge/style             controllers.PropertyController.addEdgeStyle()

PUT         /property/edge/style             controllers.PropertyController.updateEdgeStyle()

# edge type get/set
GET         /property/edge/type/:name       controllers.PropertyController.getEdgeType(name: String)

POST        /property/edge/type             controllers.PropertyController.addEdgeType()

PUT         /property/edge/type             controllers.PropertyController.updateEdgeType()

# edge type get/set
GET         /property/edge/label/:name       controllers.PropertyController.getEdgeLabel(name: String)

POST        /property/edge/label             controllers.PropertyController.addEdgeLabel()

PUT         /property/edge/label             controllers.PropertyController.updateEdgeLabel()


# Insert a new dataset
POST        /dataset                      controllers.DatasetController.addDataset()

# For recent x day, which job use the target dataset as a source, or which job produce this datasets.
GET         /lineage/dataset              controllers.LineageController.getJobsByDataset(urn: String)

# Given the flow path and job name, will find the upstream/downstream datasets of most recent execution of this job
GET         /lineage/job                  controllers.LineageController.getDatasetsByJob(flowPath: String, jobName: String)

# Given the flow path and job name, will find the upstream/downstream datasets of most recent execution of this job
GET         /lineage/job/exec/flow        controllers.LineageController.getDatasetsByFlowExec(flowExecId: Long, jobName: String)

# Given the flow path and job name, will find the upstream/downstream datasets of most recent execution of this job
GET         /lineage/job/exec/job         controllers.LineageController.getDatasetsByJobExec(jobExecId: Long)

# Insert a new job data lineage
POST        /lineage                      controllers.LineageController.addJobLineage()

# Update job execution lineage
POST        /lineage/job/exec             controllers.LineageController.updateJobExecutionLineage()

#param: instance
#param: flowPath
#get flow owner
GET         /flow/owner                   controllers.FlowController.getFlowOwners(flowPath:String)

#param: instance
#param: flowPath
# Get flow schedules
GET         /flow/schedule                controllers.FlowController.getFlowSchedules(flowPath:String)

# Add a new metadata etl job
POST        /etl                          controllers.EtlJobController.addEtlJob()

# Get a metadata etl job
GET         /etl                          controllers.EtlJobController.getEtlJobById(id:Int)

# Get all etl jobs
GET         /etls                         controllers.EtlJobController.getAllJobs()

# Update etl job property
PUT         /etl/property                 controllers.EtlJobPropertyController.updateJobProperty()

# Update etl job status
PUT         /etl/control                  controllers.EtlJobController.updateEtlJobStatus()

# Update etl job schedule
PUT         /etl/schedule                 controllers.EtlJobController.updateEtlJobSchedule()

# Get all applications
GET         /cfg/apps                     controllers.CfgController.getAllApps

# Get application by id
GET         /cfg/app/id                   controllers.CfgController.getAppById(id: Int)

# Get application by name
GET         /cfg/app/name                 controllers.CfgController.getAppByName(name: String)

# Get all databases
GET         /cfg/dbs                      controllers.CfgController.getAllDbs

# Get application by id
GET         /cfg/db/id                    controllers.CfgController.getDbById(id: Int)

# Get application by name
GET         /cfg/db/name                  controllers.CfgController.getDbByName(name: String)

# Add new application
POST        /cfg/app                      controllers.CfgController.addApp()

# Add new database
POST        /cfg/db                       controllers.CfgController.addDb()

# Add new application
PUT         /cfg/app                      controllers.CfgController.updateApp()

# Add new database
PUT         /cfg/db                       controllers.CfgController.updateDb()

# Get all filename patterns
GET         /pattern/filename             controllers.PatternController.getAllFilenamePatterns()

# Insert a new filename pattern
POST        /pattern/filename             controllers.PatternController.addFilenamePattern()

# Get all filename patterns
GET         /pattern/partition             controllers.PatternController.getAllDatasetPartitionPatterns()

# Insert a new filename pattern
POST        /pattern/partition             controllers.PatternController.addDatasetPartitionPattern()

# Get all filename patterns
GET         /pattern/lineage             controllers.PatternController.getAllLineagePattern()

# Insert a new filename pattern
POST        /pattern/lineage             controllers.PatternController.addLineagePattern()

# Get all filename patterns
GET         /pattern/jobid             controllers.PatternController.getAllJobIdPattern

# Insert a new filename pattern
POST        /pattern/jobid             controllers.PatternController.addJobIdPattern()

# Get all deployment info of a dataset by either id or urn
GET         /dataset/deployment           controllers.DatasetInfoController.getDatasetDeployment()

# Update deployment info of a dataset
POST        /dataset/deployment           controllers.DatasetInfoController.updateDatesetDeployment()

# Get all capacity info of a dataset by either id or urn
GET         /dataset/capacity             controllers.DatasetInfoController.getDatasetCapacity()

# Update capacity info of a dataset
POST        /dataset/capacity             controllers.DatasetInfoController.updateDatesetCapacity()

# Get all tags info of a dataset by either id or urn
GET         /dataset/tag                  controllers.DatasetInfoController.getDatasetTags()

# Update tags of a dataset
POST        /dataset/tag                  controllers.DatasetInfoController.updateDatesetTags()

# Get case sensitivity info of a dataset by either id or urn
GET         /dataset/casesensitivity      controllers.DatasetInfoController.getDatasetCaseSensitivity()

# Update case sensitive info of a dataset
POST        /dataset/casesensitivity      controllers.DatasetInfoController.updateDatasetCaseSensitivity()

# Get reference info of a dataset by either id or urn
GET         /dataset/reference            controllers.DatasetInfoController.getDatasetReference()

# Update reference info of a dataset
POST        /dataset/reference            controllers.DatasetInfoController.updateDatasetReference()

# Get partition info of a dataset by either id or urn
GET         /dataset/partition            controllers.DatasetInfoController.getDatasetPartition()

# Update partition info of a dataset
POST        /dataset/partition            controllers.DatasetInfoController.updateDatasetPartition()

# Get privacy compliance info of a dataset by either id or urn
GET         /dataset/compliance           controllers.DatasetInfoController.getDatasetCompliance()

# Update privacy compliance info of a dataset
POST        /dataset/compliance           controllers.DatasetInfoController.updateDatasetCompliance()

# Get security info of a dataset by either id or urn
GET         /dataset/security             controllers.DatasetInfoController.getDatasetSecurity()

# Update security info of a dataset
POST        /dataset/security             controllers.DatasetInfoController.updateDatasetSecurity()

# Get owner info of a dataset by either id or urn
GET         /dataset/owner                controllers.DatasetInfoController.getDatasetOwner()

# Update owner info of a dataset
POST        /dataset/owner                controllers.DatasetInfoController.updateDatasetOwner()

# Get constraints of a dataset by either id or urn
GET         /dataset/constraint           controllers.DatasetInfoController.getDatasetConstraint()

# Update constraints of a dataset
POST        /dataset/constraint           controllers.DatasetInfoController.updateDatesetConstraint()

# Get indices of a dataset by either id or urn
GET         /dataset/index                controllers.DatasetInfoController.getDatasetIndex()

# Update indices of a dataset
POST        /dataset/index                controllers.DatasetInfoController.updateDatesetIndex()

# Get schema of a dataset by either id or urn
GET         /dataset/schema               controllers.DatasetInfoController.getDatasetSchema()

# Update schema of a dataset
POST        /dataset/schema               controllers.DatasetInfoController.updateDatesetSchema()

# Get inventory items by data platform + native name + origin + (optional) limit
GET         /dataset/inventory            controllers.DatasetInfoController.getDatasetInventoryItems()

# Update dataset inventory
POST        /dataset/inventory            controllers.DatasetInfoController.updateDatesetInventory()
